package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	"bytes"
	"fmt"
	"math/rand"
	"sync"
	"sync/atomic"
	"time"

	"6.824/labgob"
	"6.824/labrpc"
)

type State int

const (
	Follower State = iota
	Canidate
	Leader
)

type MyData struct {
	Term int
	Vote int
	Log  []LogEntry
}


type LogEntry struct {
	Term    int
	Command interface{}
}

//
// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in part 2D you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh, but set CommandValid to false for these
// other uses.
//
type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int

	// For 2D:
	SnapshotValid bool
	Snapshot      []byte
	SnapshotTerm  int
	SnapshotIndex int
}

//
// A Go object implementing a single Raft peer.
//
type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]
	dead      int32               // set by Kill()

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.
	// 2A code
	currentTerm   int
	votedFor      int
	commitIndex   int
	lastApplied   int
	voteCount     int
	state         State
	log           []LogEntry
	lastHeartBeat time.Time
	timeout       time.Duration
    // 2B code
	nextIndex   []int
	matchIndex  []int
    updateIndex []bool
    channelClosed bool
	msgChannel  chan ApplyMsg

}

type AppendEntriesArgs struct {
	Term         int
	LeaderId     int
	PrevLogIndex int
	PrevLogTerm  int
	Entries      []LogEntry
	LeaderCommit int
}

type AppendEntriesReply struct {
	Term          int
	Success       bool
	Inconsistency bool
	PerTermIndex  int
	PerTerm       int
}

func (rf *Raft) BuildAE(l int, r int) (AppendEntriesArgs) {
    args := AppendEntriesArgs{}
    args.Term = rf.currentTerm 
    args.LeaderId = rf.me
    args.PrevLogIndex, args.PrevLogTerm = rf.GetLogInfo(l)
    if l == r {
        args.Entries = make([]LogEntry, 0)
    } else {
        args.Entries = rf.log[l:r]
    }
    args.LeaderCommit = rf.commitIndex
    return args
}

// lock by father
func (rf *Raft) InitTimeout() {
	rf.lastHeartBeat = time.Now()
	rf.timeout = time.Duration(300+rand.Intn(150)) * time.Millisecond
}

func (rf *Raft) GetLogInfo(id int) (int, int) {
	if id == 0 {
		return 0, 0
	} else {
		return id, rf.log[id-1].Term
	}
}

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {
	rf.mu.Lock()
	defer rf.mu.Unlock()
	var term int
	var isleader bool
	// Your code here (2A).
	term = rf.currentTerm
	isleader = (rf.state == Leader)
	return term, isleader
}
//
// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
//
func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	// w := new(bytes.Buffer)
	// e := labgob.NewEncoder(w)
	// e.Encode(rf.xxx)
	// e.Encode(rf.yyy)
	// data := w.Bytes()
	// rf.persister.SaveRaftState(data)
    w := new(bytes.Buffer)
	e := labgob.NewEncoder(w)
	mydata := MyData{}
	mydata.Term = rf.currentTerm
	mydata.Vote = rf.votedFor
	mydata.Log = make([]LogEntry, len(rf.log))
	//fmt.Printf("who1: %v %v\n", len(mydata.Log), len(rf.log))
	copy(mydata.Log, rf.log)
	//fmt.Printf("who2: %v %v\n", len(mydata.Log), len(rf.log))
	e.Encode(mydata)
	data := w.Bytes()
	rf.persister.SaveRaftState(data)
}

//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	rf.mu.Lock()
	defer rf.mu.Unlock()
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	// r := bytes.NewBuffer(data)
	// d := labgob.NewDecoder(r)
	// var xxx
	// var yyy
	// if d.Decode(&xxx) != nil ||
	//    d.Decode(&yyy) != nil {
	//   error...
	// } else {
	//   rf.xxx = xxx
	//   rf.yyy = yyy
	// }
    r := bytes.NewBuffer(data)
	d := labgob.NewDecoder(r)
	mydata := MyData{}
	if d.Decode(&mydata) != nil {
		fmt.Printf("touxi\n")
	} else {
		//fmt.Printf("data:%v %v %v\n", mydata.Term, mydata.Vote, len(rf.log))
		rf.currentTerm = mydata.Term
		rf.votedFor = mydata.Vote
		rf.log = make([]LogEntry, len(mydata.Log))
		copy(rf.log, mydata.Log)
	}
}

//
// AkJG service wants to switch to snapshot.  Only do so if Raft hasn't
// have more recent info since it communicate the snapshot on applyCh.
//
func (rf *Raft) CondInstallSnapshot(lastIncludedTerm int, lastIncludedIndex int, snapshot []byte) bool {

	// Your code here (2D).

	return true
}

// the service says it has created a snapshot that has
// all info up to and including index. this means the
// service no longer needs the log through (and including)
// that index. Raft should now trim its log as much as possible.
func (rf *Raft) Snapshot(index int, snapshot []byte) {
	// Your code here (2D).

}

//
// example RequestVote RPC arguments structure.
// field names must start with capital letters!
//
type RequestVoteArgs struct {
	// Your data here (2A, 2B).
	Term         int
	CanidateId   int
	LastLogIndex int
	LastLogTerm  int
}

//
// example RequestVote RPC reply structure.
// field names must start with capital letters!
//
type RequestVoteReply struct {
	// Your data here (2A).
	Term        int
	VoteGranted bool
}

//
// example RequestVote RPC handler.
//
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).
	rf.mu.Lock()
	defer rf.mu.Unlock()
    needPersist := false
	reply.Term = rf.currentTerm
	if args.Term < rf.currentTerm {
		reply.VoteGranted = false
	} else {
		if args.Term > rf.currentTerm {
			rf.currentTerm = args.Term
			rf.votedFor = -1
			rf.state = Follower
			rf.InitTimeout()
            needPersist = true
		}
		lastLogIndex, lastLogTerm := rf.GetLogInfo(len(rf.log))
		if (rf.votedFor == -1 || rf.votedFor == args.CanidateId) && (args.LastLogTerm > lastLogTerm || (args.LastLogTerm == lastLogTerm && args.LastLogIndex >= lastLogIndex)) {
			rf.InitTimeout()
            if rf.votedFor == -1 {
                needPersist = true
            }
			rf.votedFor = args.CanidateId
			reply.VoteGranted = true
		} else {
			reply.VoteGranted = false
		}
	}
    if needPersist {
        rf.persist()
    }
}

//
// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
//
func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply) bool {
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)
	return ok
}

//
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := true

	// Your code here (2B).
    rf.mu.Lock()
	defer rf.mu.Unlock()
	if rf.state != Leader {
		isLeader = false
	} else {
		isLeader = true
		term = rf.currentTerm
		rf.log = append(rf.log, LogEntry{Command: command, Term: rf.currentTerm})
		index = len(rf.log)
        rf.persist()
	}
	return index, term, isLeader
}

//
// the tester doesn't halt goroutines created by Raft after each test,
// but it does call the Kill() method. your code can use killed() to
// check whether Kill() has been called. the use of atomic avoids the
// need for a lock.
//
// the issue is that long-running goroutines use memory and may chew
// up CPU time, perhaps causing later tests to fail and generating
// confusing debug output. any goroutine with a long-running loop
// should call killed() to check whether it should stop.
//
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.dead, 1)
	// Your code here, if desired.
    rf.mu.Lock()
	defer rf.mu.Unlock()
	close(rf.msgChannel)
    rf.channelClosed = true
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.dead)
	return z == 1
}

// The ticker go routine starts a new election if this peer hasn't received
// heartsbeats recently.
func (rf *Raft) ticker() {
	for rf.killed() == false {
		// Your code here to check if a leader election should
		// be started and to randomize sleeping time using
		// time.Sleep().
		rf.mu.Lock()
		currentState := rf.state
		timeout := rf.lastHeartBeat.Add(rf.timeout)
		tmpTerm := rf.currentTerm
		rf.mu.Unlock()
		switch currentState {
		case Follower:
			{
				if time.Now().After(timeout) {
					go rf.beginElection(tmpTerm)
					time.Sleep(time.Millisecond * 10)
				} else {
					time.Sleep(timeout.Sub(time.Now()))
				}
			}
		case Canidate:
			{
				if time.Now().After(timeout) {
					go rf.beginElection(tmpTerm)
				} else {
					time.Sleep(time.Millisecond * 10)
				}
			}
		case Leader:
			{
				time.Sleep(time.Millisecond * 10)
			}
		}
	}
}

func (rf *Raft) beginElection(tmpTerm int) {
	rf.mu.Lock()
	if rf.currentTerm != tmpTerm {
		rf.mu.Unlock()
		return
	}
	rf.InitTimeout()
	rf.state = Canidate
	rf.currentTerm++
	tmpTerm++
    //fmt.Printf("election term:%v %v\n",tmpTerm,rf.me)
	rf.votedFor = rf.me
	rf.voteCount = 1
    rf.persist()
	rf.mu.Unlock()
	for i, up := 0, len(rf.peers); i < up; i++ {
		if i != rf.me {
			go rf.getVote(i, tmpTerm)
		}
	}
	for rf.killed() == false {
		rf.mu.Lock()
		nowTerm := rf.currentTerm
		nowState := rf.state
		timeout := rf.lastHeartBeat.Add(rf.timeout)
		votes := rf.voteCount
		rf.mu.Unlock()
		if tmpTerm != nowTerm || nowState != Canidate || time.Now().After(timeout) {
			break
		}
		if votes*2 > len(rf.peers) {
			rf.mu.Lock()
            //fmt.Printf("Term:%v Leader:%v\n",rf.currentTerm,rf.me)
			rf.state = Leader
            rf.nextIndex = make([]int, len(rf.peers))
			rf.matchIndex = make([]int, len(rf.peers))
            rf.updateIndex = make([]bool, len(rf.peers))
            for i:=0;i<len(rf.peers);i++ {
                if i == rf.me {
					continue
				}
				rf.nextIndex[i] = len(rf.log) + 1
				rf.matchIndex[i] = 0
                rf.updateIndex[i] = true
                go rf.talkToFollower(i, tmpTerm)
                go rf.updateMatch(i,tmpTerm)
            }
			rf.mu.Unlock()
			go rf.beginHeartBeat(tmpTerm)
            go rf.updateCommitIndex(tmpTerm)
			break
		}
		time.Sleep(10 * time.Millisecond)
	}
}

func (rf *Raft) getVote(id int, tmpTerm int) {
	rf.mu.Lock()
	args := RequestVoteArgs{}
	args.CanidateId = rf.me
	args.Term = tmpTerm
	args.LastLogIndex, args.LastLogTerm = rf.GetLogInfo(len(rf.log))
	tmpState := rf.state
	if tmpState != Canidate || rf.currentTerm != tmpTerm {
		rf.mu.Unlock()
		return
	}
	rf.mu.Unlock()
	reply := RequestVoteReply{}
	if rf.sendRequestVote(id, &args, &reply) {
		rf.mu.Lock()
		if reply.Term > rf.currentTerm {
			rf.currentTerm = reply.Term
			rf.state = Follower
			rf.votedFor = -1
            rf.persist()
			rf.InitTimeout()
		}
		if tmpTerm == rf.currentTerm && reply.VoteGranted {
			rf.voteCount++
		}
		rf.mu.Unlock()
	}
}

func (rf *Raft) beginHeartBeat(tmpTerm int) {
	rf.mu.Lock()
	if tmpTerm != rf.currentTerm {
		rf.mu.Unlock()
		return
	}
	rf.mu.Unlock()
	for rf.killed() == false {
		rf.mu.Lock()
		nowState := rf.state
		length := len(rf.peers)
		nowTerm := rf.currentTerm
		rf.mu.Unlock()
		if nowTerm == tmpTerm && nowState == Leader {
			for i := 0; i < length; i++ {
				if i == rf.me {
					continue
				}
				go rf.sendHeartBeat(i, tmpTerm)
			}
			time.Sleep(150 * time.Millisecond)
		} else {
			break
		}
	}
}

func (rf *Raft) sendHeartBeat(id int, tmpTerm int) {
	rf.mu.Lock()
	tmpState := rf.state
    index := rf.nextIndex[id] - 1
	if tmpState != Leader || rf.currentTerm != tmpTerm {
		rf.mu.Unlock()
		return
	}
	rf.mu.Unlock()
    f := true
    for i:=0;i<14;i++ {
        rf.mu.Lock()
        f = rf.updateIndex[id]
        //fmt.Printf("%v %v\n",i,f)
        rf.mu.Unlock()
        if f == false {
            break;
        } else {
            time.Sleep(10 * time.Millisecond)
        }
    }
    //fmt.Printf("index:%v \n",index)
	rf.sendLog(id,index,index, true)
}

func (rf *Raft) sendLog(id int,l int,r int, isheartbeat bool) bool {
	rf.mu.Lock()

    //fmt.Printf("me:%v id:%v range:%v %v isheartbeat:%v data:%v\n",rf.me,id,l,r,isheartbeat,args.Entries)
	tmpState := rf.state
    args := rf.BuildAE(l,r)
	rf.mu.Unlock()

	if tmpState != Leader {
		return false
	}
	reply := AppendEntriesReply{}
	ok := rf.peers[id].Call("Raft.AppendEntries", &args, &reply)

	rf.mu.Lock()
	if ok {
		if reply.Term > rf.currentTerm {
			rf.currentTerm = reply.Term
			rf.state = Follower
			rf.votedFor = -1
            rf.persist()
			rf.InitTimeout()
		}
        if reply.Inconsistency {
            rf.updateIndex[id] = true
        }
	}
	rf.mu.Unlock()
	return ok && reply.Success
}

func (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {
	rf.mu.Lock()
    needPersist := false
	if args.Term > rf.currentTerm || (args.Term == rf.currentTerm && rf.state != Follower){
		rf.currentTerm = args.Term
		rf.votedFor = -1
		rf.InitTimeout()
		rf.state = Follower
        needPersist = true
	}
	reply.Term = rf.currentTerm
	length := len(rf.log)
    reply.Inconsistency = false
	if rf.state != Follower || args.Term < rf.currentTerm {
		reply.Success = false
	} else if length < args.PrevLogIndex || (args.PrevLogIndex != 0 && rf.log[args.PrevLogIndex-1].Term != args.PrevLogTerm) {
		reply.Success = false
		reply.Inconsistency = true
        if length < args.PrevLogIndex {
			reply.PerTermIndex = length
		} else {
            reply.PerTermIndex = args.PrevLogIndex
        }
        argsLogTerm := args.PrevLogTerm
        if reply.PerTermIndex == 0 {
            argsLogTerm = 0
        } else if argsLogTerm > rf.log[reply.PerTermIndex-1].Term {
            argsLogTerm = rf.log[reply.PerTermIndex-1].Term 
        }

        reply.PerTerm = 0
        for i := reply.PerTermIndex ; i >= 1; i-- {
            if rf.log[i-1].Term <= argsLogTerm {
                reply.PerTermIndex = i
                reply.PerTerm = rf.log[i-1].Term
                break
            }
        }
        if reply.PerTerm == 0 {
            reply.PerTermIndex = 0
        }
        rf.log = rf.log[:reply.PerTermIndex]
        if len(rf.log) < length {
            needPersist = true
        }

	} else {
		rf.InitTimeout()
		reply.Success = true

		lengthArg := len(args.Entries)
		newLength := args.PrevLogIndex + lengthArg
        lengthRf := len(rf.log)
        if newLength >= lengthRf {
			rf.log = rf.log[:args.PrevLogIndex]
			rf.log = append(rf.log, args.Entries...)
		} else {
			pre := rf.log[:args.PrevLogIndex]
			nex := rf.log[newLength:]
			rf.log = append(pre, args.Entries...)
			if nex[0].Term == args.Term {
				rf.log = append(rf.log, nex...)
			}
		}
        needPersist = true
		if rf.commitIndex < args.LeaderCommit {
			if newLength < args.LeaderCommit {
				rf.commitIndex = newLength
			} else {
				rf.commitIndex = args.LeaderCommit
			}
		}
	}
    if needPersist {
        rf.persist()
    }
	rf.mu.Unlock()
    rf.UpdateLastApply()
}

func (rf *Raft) updateCommitIndex(tmpTerm int) {
    rf.mu.Lock()
    commitOk := rf.commitIndex
    rf.mu.Unlock()
	for rf.killed() == false {
		rf.mu.Lock()
		nowState := rf.state
		length := len(rf.log)
		len_peer := len(rf.peers)
		nowTerm := rf.currentTerm
		rf.mu.Unlock()
		if nowState != Leader || nowTerm != tmpTerm {
			break
		}
		for commitOk < length {
			cnt := 0
			rf.mu.Lock()
			for i := 0; i < len_peer; i++ {
				if i == rf.me {
                    cnt++
					continue
				}
				if rf.matchIndex[i] >= commitOk+1 {
					cnt++
				}
			}
			rf.mu.Unlock()
			if cnt*2 > len_peer {
				rf.mu.Lock()
                commitOk++
                //fmt.Printf("isLeader:%v currentTerm:%v logTerm:%v\n",(rf.state==Leader),rf.currentTerm,rf.log[commitOk-1].Term)
				if rf.state == Leader && rf.log[commitOk-1].Term == rf.currentTerm {
					rf.commitIndex = commitOk
                    //fmt.Printf("me:%v commitIndex:%v\n",rf.me,rf.commitIndex)
				}
				rf.mu.Unlock()
			} else {
				break
			}
		}
		rf.UpdateLastApply()
		time.Sleep(time.Millisecond * 10)
	}
}

func (rf *Raft) updateMatch(id int, tmpTerm int) {
	for rf.killed() == false {
		rf.mu.Lock()
		nowTerm := rf.currentTerm
	    tmpNext := rf.nextIndex[id] - 1
		if rf.state != Leader || nowTerm != tmpTerm {
		    rf.mu.Unlock()
			break
		}
        if rf.updateIndex[id] == false {
            rf.mu.Unlock()
            time.Sleep(10 * time.Millisecond)
            continue;
        }
        args := rf.BuildAE(tmpNext,tmpNext)
        reply := AppendEntriesReply{}
        rf.mu.Unlock()
        ok := rf.peers[id].Call("Raft.AppendEntries", &args, &reply)
        if ok {
            rf.mu.Lock()
            if rf.updateIndex[id] == false {
                rf.mu.Unlock()
                continue 
            }
            if reply.Term > rf.currentTerm {
                rf.currentTerm = reply.Term
				rf.state = Follower
				rf.votedFor = -1
				rf.InitTimeout()
				rf.persist()
				rf.mu.Unlock()
				break
            } else if reply.Inconsistency {
                tmpNext = reply.PerTermIndex
                if tmpNext!=0 && reply.PerTerm!= rf.log[reply.PerTermIndex-1].Term {
                    MinTerm := rf.log[reply.PerTermIndex-1].Term
                    if MinTerm < reply.PerTerm {
                        MinTerm = reply.PerTerm
                    }
                    tmpNext = 0
                    for i := reply.PerTermIndex;i >= 1;i-- {
                        if rf.log[i-1].Term <= MinTerm {
                            tmpNext = i;
                            break;
                        }
                    }
                }
                if tmpNext + 1 < rf.nextIndex[id] {
                    rf.nextIndex[id] = tmpNext + 1
                    rf.matchIndex[id] = tmpNext
                }
            } else {
                rf.nextIndex[id] = tmpNext + 1
                rf.matchIndex[id] = tmpNext
                rf.updateIndex[id] = false
            }
            rf.mu.Unlock()

        } else {
            time.Sleep(10 * time.Millisecond)
        }
	}
}

func (rf *Raft) UpdateLastApply() {
	rf.mu.Lock()
	defer rf.mu.Unlock()
	if rf.commitIndex > len(rf.log) {
		rf.commitIndex = len(rf.log)
	}
	for rf.lastApplied < rf.commitIndex && rf.channelClosed == false {
		rf.lastApplied++
		msg := ApplyMsg{}
		msg.Command = rf.log[rf.lastApplied-1].Command
		msg.CommandIndex = rf.lastApplied
		msg.CommandValid = true
		rf.msgChannel <- msg
	}
}

func (rf *Raft) talkToFollower(id int, tmpTerm int) {
	for rf.killed() == false {
		rf.mu.Lock()
		nowState := rf.state
		nowTerm := rf.currentTerm
		rf.mu.Unlock()
		if nowState != Leader || nowTerm != tmpTerm {
			break
		}
		rf.mu.Lock()
		nId := rf.nextIndex[id]
		length := len(rf.log)
		rf.mu.Unlock()
		if nId <= length {
			if rf.sendLog(id, nId-1, length, false) {
				rf.mu.Lock()
				if length > rf.matchIndex[id] {
					rf.matchIndex[id] = length
					rf.nextIndex[id] = rf.matchIndex[id] + 1
				}
                //fmt.Printf("me%v id:%v match:%v\n",rf.me,id,rf.matchIndex[id])
				rf.mu.Unlock()
			}
		}
        //fmt.Printf("nId:%v len_log:%v\n",nId,length)
		time.Sleep(time.Millisecond * 10)
	}
}


//
// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
//
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here (2A, 2B, 2C).
	rf.currentTerm = 0
	rf.votedFor = -1
	rf.log = make([]LogEntry, 0)
	rf.commitIndex = 0
	rf.lastApplied = 0
	rf.state = Follower
    rf.msgChannel=applyCh
	rf.InitTimeout()
	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())

	// start ticker goroutine to start elections
	go rf.ticker()

	return rf
}
